DISABLE_AUTO_TITLE="true"

################################################################################
# SETTINGS
################################################################################
set-option -g default-shell    $SHELL
set-option -g default-terminal "screen-256color"

set-option -gs escape-time     0
set-option -g  repeat-time     300
set-option -g  visual-activity on
set-option -g  history-limit   100000

set-option -g base-index      1
set-option -g renumber-window on
set-option -g mouse           on

# set-option -g set-titles on
# set-option -g set-titles-string "#S ❐ #I:#W ● #T"

# focus events enabled for terminals that support them
# set-option -g focus-events on

set-window-option -g aggressive-resize on
set-window-option -g monitor-activity  on
set-window-option -g xterm-keys        on
set-window-option -g mode-keys         vi
set-window-option -g pane-base-index   1

################################################################################
# STATUS LINE
################################################################################
set-option -g status          on
set-option -g status-utf8     on
set-option -g status-interval 20
set-option -g status-justify  centre

# emacs key bindings in tmux command prompt (prefix + :) are better than vi keys, even for vim users
# set-option -g status-keys emacs

set-option -g status-style       ""
set-option -g status-left-style  ""
set-option -g status-left-length 40
set-option -g status-right-style ""

set-option -g status-fg          white
set-option -g status-bg          black
set-option -g status-left        "#[fg=green][#S] #[fg=yellow]W: #I #[fg=cyan]P: #P#{?pane_synchronized, @,} #{?client_prefix,\#, }"
set-option -g status-right       "#[fg=cyan]%a %b %-d, %Y %R"

set-window-option -g window-status-fg           cyan
set-window-option -g window-status-bg           default
set-window-option -g window-status-attr         dim
set-window-option -g window-status-current-fg   white
set-window-option -g window-status-current-bg   red
set-window-option -g window-status-current-attr bright

set-option -g pane-border-fg        green
set-option -g pane-border-bg        black
set-option -g pane-active-border-fg white
set-option -g pane-active-border-bg blue

set-option -g message-fg   white
set-option -g message-bg   black
set-option -g message-attr bright

################################################################################
# KEY BINDINGS
################################################################################
unbind-key C-b

set-option -g prefix2 C-Space
bind-key C-Space send-prefix -2
bind-key C-a last-window

set-option -g prefix C-z
bind-key C-z last-window

bind-key R source-file ~/.tmux.conf \; display-message "Reloaded ~/.tmux.conf!"

bind-key 0 send-keys C-u C-l C-u \; run-shell "sleep .1s" \; clear-history \; display-message "Cleared history!"

bind-key C-d detach-client

bind-key S switch-client -l

bind-key C-q confirm-before -p "kill-session #S? (y/n)"   kill-session
bind-key C-x confirm-before -p "kill-window #I:#W? (y/n)" kill-window

bind-key C-w choose-tree -u

bind-key C new-window -c "#{pane_current_path}"

bind-key C-v split-window -h
bind-key C-s split-window -v

bind-key C-\ split-window -h
bind-key C-_ split-window -v

bind-key | split-window -h -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"

bind-key F command-prompt -p "(find-window -NT):" "find-window -NT '%%'"

bind-key -r C-p previous-window
bind-key -r C-n next-window

bind-key -r C-h previous-window
bind-key -r C-l next-window

bind-key -r P swap-window -t :-
bind-key -r N swap-window -t :+

bind-key -r C-j select-pane -t :.-
bind-key -r C-k select-pane -t :.+

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

bind-key Enter resize-pane -Z

bind-key "@" choose-window "join-pane -t '%%'"

bind-key : command-prompt -p "tmux:"

bind-key C-r command-prompt -p "(new-window -c #{pane_current_path}) command:" "new-window -c '#{pane_current_path}' -n '%1' '%%'"

bind-key C-i command-prompt -p "(split-window -h):" -I "man " "split-window -h '%%'"
bind-key I   command-prompt -p "(new-window):"      -I "man " "new-window -n '%1' '%%'"

bind-key ` new-window -n top top
if-shell 'which htop' 'bind-key ` new-window -n htop htop'

bind-key g run-shell -b "cd #{pane_current_path}; git gui"
bind-key G run-shell -b "cd #{pane_current_path}; gitk"

bind-key C-g run-shell -b "cd #{pane_current_path}; git gui"
bind-key C-y run-shell -b "cd #{pane_current_path}; gitk"

bind-key C-t new-window -c "#{pane_current_path}" -n tig "tig status"

bind-key C-u capture-pane -J \; new-window -n urlview "tmux save-buffer - | urlview"

bind-key C-f capture-pane -J \; new-window -n fpp -c "#{pane_current_path}" "tmux save-buffer - | fpp"

bind-key C-b command-prompt -p "(new-window) w3m:" -I "google.com" "new-window -n w3m 'w3m %%'"

bind-key Y pipe-pane -o "cat >> ~/.tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.out" \; display-message "Toggled logging to ~/.tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.out!"

bind-key > command-prompt -p "capture all lines:" -I "~/.tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.log" "capture-pane -J -S- ; save-buffer '%%'"
bind-key < command-prompt -p "capture visible lines:" -I "~/.tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.log" "capture-pane -J ; save-buffer '%%'"

bind-key b choose-buffer "show-buffer   -b '%%'"
bind-key B choose-buffer "delete-buffer -b '%%'"
bind-key + choose-buffer "run-shell \"tmux save-buffer -b '%%' - | xsel -i -b\""

bind-key Escape copy-mode
bind-key y      copy-mode
bind-key v      paste-buffer
bind-key V      run-shell "tmux set-buffer \"$(xsel -o -b)\"; tmux paste-buffer"

bind-key -T root WheelUpPane if-shell -Ft= "#{?pane_in_mode,1,#{alternate_on}}" "send-keys -M" "copy-mode -e"

bind-key -t vi-copy v   begin-selection
bind-key -t vi-copy y   copy-pipe "xsel -i -b"
bind-key -t vi-copy Y   copy-pipe "tmux paste-buffer"
bind-key -t vi-copy r   rectangle-toggle
bind-key -t vi-copy C-v rectangle-toggle

bind-key -t vi-choice o   choose
bind-key -t vi-choice h   tree-collapse
bind-key -t vi-choice l   tree-expand
bind-key -t vi-choice C-h tree-collapse-all
bind-key -t vi-choice C-l tree-expand-all

bind-key -t vi-edit C-p history-up
bind-key -t vi-edit C-n history-down
bind-key -t vi-edit C-a start-of-line
bind-key -t vi-edit C-e end-of-line
bind-key -t vi-edit C-b cursor-left
bind-key -t vi-edit C-f cursor-right
bind-key -t vi-edit C-v paste
bind-key -t vi-edit C-d delete-line
bind-key -t vi-edit C-k delete-end-of-line

################################################################################
# MAC OS X SETTINGS AND KEY BINDINGS
################################################################################
if-shell 'test "$(uname)" = "Darwin"' ' \
  set-option -g default-command "reattach-to-user-namespace -l $SHELL"         ; \
  bind-key + choose-buffer "run-shell \"tmux save-buffer -b '%%' - | pbcopy\"" ; \
  bind-key V run-shell "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"     ; \
  bind-key -t vi-copy y copy-pipe "pbcopy"                                     ; \
'
